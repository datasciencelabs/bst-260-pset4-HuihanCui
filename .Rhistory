cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
inner_join(population,  by = "state", relationship = "many-to-many") |>
ggplot(aes(x = date, y = 100000 * cases / population)) +
geom_line() +
facet_wrap(~ region_name) +
labs(x = "Time", y = "Cases per 100000", title = "Time series plot of cases per 100000 for 2020 and 2021",
caption = "The data comes from US Census API and CDC API")
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
inner_join(population,  by = "state", relationship = "many-to-many") |>
ggplot(aes(x = date, y = 100000 * cases / population, colour = state)) +
geom_line() +
facet_wrap(~ region_name) +
labs(x = "Time", y = "Cases per 100000", title = "Time series plot of cases per 100000 for 2020 and 2021",
caption = "The data comes from US Census API and CDC API")
cases_raw |>
filter(as.numeric(format(date, "%Y")) %in% c(2020, 2021)) |>
inner_join(population,  by = "state", relationship = "many-to-many") |>
ggplot(aes(x = date, y = 100000 * cases / population, colour = state)) +
geom_line() +
facet_wrap(~ region_name) +
labs(x = "Time", y = "Cases per 100000", title = "Time series plot of cases per 100000 for 2020 and 2021",
caption = "The data comes from US Census API and CDC API")
cases_raw |>
filter(as.numeric(format(date, "%Y")) %in% c(2020, 2021))
#cases |>
cases_raw |>
filter(as.numeric(format(date, "%Y")) %in% c(2020, 2021)) |>
inner_join(population,  by = "state", relationship = "many-to-many") |>
ggplot(aes(x = date, y = 100000 * cases / population, colour = state)) +
geom_line() +
facet_wrap(~ region_name) +
labs(x = "Time", y = "Cases per 100000", title = "Time series plot of cases per 100000 for 2020 and 2021",
caption = "The data comes from US Census API and CDC API")
cases <- cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(month_num = month(date)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE),
month_num
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
#cases |>
library(lubridate)
library(knitr)
cases <- cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(month_num = month(date)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE),
month_num
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(month_num = month(date)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE),
month_num
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(month_num = month(date)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = locale(date_names = "en")),
month_num
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
#cases |>
library(lubridate)
library(knitr)
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(month_num = month(date)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = locale("en")),
month_num
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
rlang::last_trace()
#cases |>
library(lubridate)
library(knitr)
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(month_num = month(date)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = locale("C")),
month_num
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
#cases |>
library(lubridate)
library(knitr)
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(month_num = month(date)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = locale("En")),
month_num
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
locale()
#cases |>
library(lubridate)
library(knitr)
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(month_num = month(date)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE),
month_num
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
#cases |>
library(lubridate)
library(knitr)
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
mutate(month_num = month(date)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = "C"),
month_num
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month_num) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
#cases |>
library(lubridate)
library(knitr)
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = "C")
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
select(year, month, total_cases) |>
kable(caption = "Total daily new COVID-19 cases by month from 2020 to 2021")
class(cases_raw$date)
#cases |>
library(lubridate)
library(knitr)
# Date are already in Date type, as processed in Q11
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = "C")
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
select(year, month, total_cases) |>
kable(caption = "Total new COVID-19 cases by month from 2020 to 2021")
#cases |>
library(lubridate)
library(knitr)
# Date are already in Date type, as processed in Q11
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = "C")
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable(caption = "Total new COVID-19 cases by month from 2020 to 2021")
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
# cases_raw <-
response <- request(api) |> req_url_query(`$limit` = 10000000000) |> req_perform()
print(resp_status(response))
cases_raw <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
cases_raw <- cases_raw |>
select(state, end_date, new_cases) |>
rename(cases = new_cases, date = end_date) |>
mutate(cases = as.numeric(cases), date = as.Date(date)) |>
filter(!is.na(state), !is.na(date), !is.na(cases))
cases_raw
#cases |>
cases_raw |>
filter(as.numeric(format(date, "%Y")) %in% c(2020, 2021)) |>
inner_join(population,  by = "state", relationship = "many-to-many") |>
ggplot(aes(x = date, y = 100000 * cases / population, colour = state)) +
geom_line() +
facet_wrap(~ region_name) +
labs(x = "Time", y = "Cases per 100000", title = "Time series plot of cases per 100000 for 2020 and 2021",
caption = "The data comes from US Census API and CDC API")
#cases |>
library(lubridate)
library(knitr)
# Date are already in Date type, as processed in Q11
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = "C")
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable(caption = "Total new COVID-19 cases by month from 2020 to 2021")
response <- request(deaths_url) |> req_url_query(`$limit` = 10000000000) |> req_perform()
response <- request(deaths_url) |> req_url_query(`$limit` = 10000000000) |> req_perform()
print(resp_status(response))
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
View(deaths)
deaths <- deaths |>
select(state, date = end_date, deaths = covid_19_deaths)
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
deaths <- deaths |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(deaths = as.numeric(deaths), date = as.Date(date)) |>
filter(state %in% c(state.abb, "DC", "PR")) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
deaths <- deaths |>
select(state, date = end_date, deaths = covid_19_deaths)
deaths <- deaths |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(deaths = as.numeric(deaths), date = as.Date(date))
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
deaths <- deaths |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(deaths = as.numeric(deaths), date = as.Date(date))
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
deaths <- deaths |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(deaths = as.numeric(deaths), date = as.Date(date)) |>
filter(state %in% c(state.abb, "DC", "PR"))
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
state.name
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
deaths <- deaths |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(deaths = as.numeric(deaths), date = as.Date(date)) |>
filter(state %in% c(state.name, "District of Columbia", "Puerto Rico")) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
# Your code here
response <- request(deaths_url) |> req_url_query(`$limit` = 10000000000) |> req_perform()
print(resp_status(response))
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
deaths <- deaths |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(deaths = as.numeric(deaths), date = as.Date(date)) |>
filter(state %in% c(state.name, "District of Columbia", "Puerto Rico")) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths
class(deaths$date)
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
deaths <- deaths |>
filter(sex == "All Sexes", age_group == "All Ages", state %in% c(state.name, "District of Columbia", "Puerto Rico"))
deaths <- deaths |>
filter(sex == "All Sexes", age_group == "All Ages", state %in% c(state.name, "District of Columbia", "Puerto Rico")) |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(deaths = as.numeric(deaths), date = as.Date(date)) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
deaths
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths, fill = state)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
# Your code here
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths, colour = state)) +
geom_col(show.legend = FALSE) +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
# Your code here
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
# Your code here
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
# Your code here
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = state, y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
# Your code here
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, -total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
# Your code here
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, -total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
# Your code here
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, -total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths"
)
# Your code here
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = state, y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths",
caption = "The data comes from CDC"
)
# Your code here
deaths |>
group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, -total_deaths), y = total_deaths)) +
geom_col() +
labs(
title = "Top 10 U.S. States by Total COVID-19 Deaths",
x = "State",
y = "Total Deaths",
caption = "The data comes from CDC"
)
# Your code here
deaths |> group_by(state) |>
summarise(total_deaths = sum(deaths, na.rm = TRUE), .groups = "drop") |>
arrange(desc(total_deaths)) |>
slice_head(n = 10) |>
ggplot(aes(x = reorder(state, -total_deaths), y = total_deaths)) +
geom_col() +
labs(x = "State", y = "Total deaths", title = "Top 10 states by total COVID-19 deaths",
caption = "The data comes from CDC")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
# cases_raw <-
response <- request(api) |> req_url_query(`$limit` = 10000000000) |> req_perform()
print(resp_status(response))
cases_raw <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
cases_raw <- cases_raw |>
select(state, end_date, new_cases) |>
rename(cases = new_cases, date = end_date) |>
mutate(cases = as.numeric(cases), date = as.Date(date)) |>
filter(!is.na(state), !is.na(date), !is.na(cases), state_name %in% c(state.name, "District of Columbia", "Puerto Rico"))
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
# cases_raw <-
response <- request(api) |> req_url_query(`$limit` = 10000000000) |> req_perform()
print(resp_status(response))
cases_raw <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
cases_raw <- cases_raw |>
select(state, end_date, new_cases) |>
rename(cases = new_cases, date = end_date) |>
mutate(cases = as.numeric(cases), date = as.Date(date)) |>
filter(!is.na(state), !is.na(date), !is.na(cases), state %in% c(state.name, "District of Columbia", "Puerto Rico"))
cases_raw
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
# cases_raw <-
response <- request(api) |> req_url_query(`$limit` = 10000000000) |> req_perform()
print(resp_status(response))
cases_raw <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
cases_raw <- cases_raw |>
select(state, end_date, new_cases) |>
rename(cases = new_cases, date = end_date) |>
mutate(cases = as.numeric(cases), date = as.Date(date)) |>
filter(!is.na(state), !is.na(date), !is.na(cases), state %in% c(state.name, "District of Columbia", "Puerto Rico"))
cases_raw
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
# cases_raw <-
response <- request(api) |> req_url_query(`$limit` = 10000000000) |> req_perform()
print(resp_status(response))
cases_raw <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
cases_raw <- cases_raw |>
select(state, end_date, new_cases) |>
rename(cases = new_cases, date = end_date) |>
mutate(cases = as.numeric(cases), date = as.Date(date)) |>
filter(!is.na(state), !is.na(date), !is.na(cases), state %in% c(state.abb, "DC", "PR"))
cases_raw
#cases |>
cases_raw |>
filter(as.numeric(format(date, "%Y")) %in% c(2020, 2021)) |>
inner_join(population,  by = "state", relationship = "many-to-many") |>
ggplot(aes(x = date, y = 100000 * cases / population, colour = state)) +
geom_line() +
facet_wrap(~ region_name) +
labs(x = "Time", y = "Cases per 100000", title = "Time series plot of cases per 100000 for 2020 and 2021",
caption = "The data comes from US Census API and CDC API")
#cases |>
library(lubridate)
library(knitr)
# Date are already in Date type, as processed in Q11
cases_raw |>
filter(year(date) %in% c(2020, 2021)) |>
group_by(
year  = year(date),
month = month(date, label = TRUE, abbr = FALSE, locale = "C")
) |>
summarise(total_cases = sum(cases, na.rm = TRUE), .groups = "drop") |>
arrange(year, month) |>
kable(caption = "Total new COVID-19 cases by month from 2020 to 2021")
# Your code here
response <- request(deaths_url) |> req_url_query(`$limit` = 10000000000) |> req_perform()
print(resp_status(response))
deaths <- resp_body_json(response, simplifyVector = TRUE) |> as_tibble()
deaths <- deaths |>
filter(sex == "All Sexes", age_group == "All Ages", state %in% c(state.name, "District of Columbia", "Puerto Rico")) |>
select(state, date = end_date, deaths = covid_19_deaths) |>
mutate(deaths = as.numeric(deaths), date = as.Date(date)) |>
filter(!is.na(state), !is.na(date), !is.na(deaths))
# Just for inspection here, formal table should be formulated using kable()
head(deaths)
